#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light
{
	vec3 position;
	vec3 color;

	vec3 ambientColor;
	vec3 specularColor;
	vec3 diffuseColor;

	float constant;
	float linear;
	float quadradic;

	vec3 direction;
	float coneAngle;
	float falloff;
};

uniform Material material;
#define NR_LIGHTS 4
uniform Light light[NR_LIGHTS];

void main()
{
	vec4 finalColor = vec4(0);
	for(int i = 0; i < NR_LIGHTS; ++i)
	{

		// gotta calculate that light direction
		vec3 lightDir = normalize(light[i].position - retFragPos);
		float a = cos(light[i].coneAngle);
		float d = dot(normalize(light[i].direction), -lightDir);
		if(a < d)
		{
			//vec3 lightDir = light.position - vec3(0, 0, 0);
			float lambertianStrength = dot(lightDir, retNormal);
			vec3 refl = reflect(-lightDir, retNormal);
			float specularStrength = pow(max(dot(refl, retViewDirection), 0.0f), material.specularStrength);
			float dist = length(light[i].position - retFragPos);
			float att = 1.0f / (light[i].constant + light[i].linear * dist + light[i].quadradic * (dist * dist));
			att *= 1 - pow(clamp(a / d, 0.0f, 1.0f), light[i].falloff);
			vec3 ambient = light[i].ambientColor * texture(material.diffuseTexture, retTexCoord).rgb * att / NR_LIGHTS;
			vec3 lambertian = light[i].diffuseColor * lambertianStrength * texture(material.diffuseTexture, retTexCoord).rbg * att;
			vec3 specular = light[i].specularColor * specularStrength * texture(material.specularTexture, retTexCoord).rbg * att;

			finalColor = vec4((ambient + lambertian + specular) * light[i].color, 1.0f);
		}
		else
		{
			vec3 ambient = light[i].ambientColor * texture(material.diffuseTexture, retTexCoord).rgb / NR_LIGHTS;
			finalColor += vec4(ambient * light[i].color, 1.0f);

		}
	}
	FragColor = finalColor;
}
