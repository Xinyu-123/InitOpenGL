#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light
{
	vec3 position;
	vec3 color;

	vec3 ambientColor;
	vec3 specularColor;
	vec3 diffuseColor;
};

uniform Material material;
uniform Light light;

void main()
{
	// gotta calculate that light direction
	vec3 lightDir = normalize(light.position - retFragPos);
	float lambertianStrength = dot(lightDir, retNormal);

	vec3 refl = reflect(-lightDir, retNormal);
	float specularStrength = pow(max(dot(refl, retViewDirection), 0.0f), material.specularStrength);

	vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light.ambientColor;
	vec3 lambertian = light.diffuseColor * lambertianStrength * texture(material.diffuseTexture, retTexCoord).rbg;
	vec3 specular = light.specularColor * specularStrength * texture(material.specularTexture, retTexCoord).rbg;

	FragColor = vec4(ambient + lambertian + specular, 1.0f);
}
