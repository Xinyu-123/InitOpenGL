#version 330

in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retFragPos;
in vec3 retViewDirection;
in mat4 retWorld;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
	sampler2D normalTexture;
};

struct Light
{
	vec3 position;
	vec3 color;

	vec3 ambientColor;
	vec3 specularColor;
	vec3 diffuseColor;

	float constant;
	float linear;
	float quadradic;

	vec3 direction;
	float coneAngle;
	float falloff;
};

uniform Material material;
#define NR_LIGHTS 4
uniform Light light[NR_LIGHTS];
uniform bool EnableNormalMap = false;

void main()
{
	// Early out if we have no color at this fragment position
	vec4 diffColor = texture(material.diffuseTexture, retTexCoord);
	if(diffColor.a == 0)
		discard;

	vec3 finalColor = vec3(0);
	for(int i = 0; i < NR_LIGHTS; ++i)
	{

		// gotta calculate that light direction
		vec3 lightDir = normalize(light[i].position - retFragPos);
		vec3 normal = retNormal;
		if(EnableNormalMap == true)
		{
			normal = texture(material.normalTexture, retTexCoord).rbg;
			normal = normal * 2.0f - 1.0f;
			normal = normalize(mat3(retWorld) * normal);
		}
		//vec3 lightDir = light.position - vec3(0, 0, 0);
		float lambertianStrength = dot(lightDir, normal);
		vec3 refl = reflect(-lightDir, normal);
		float specularStrength = pow(max(dot(refl, retViewDirection), 0.0f), material.specularStrength);

		vec3 ambient = light[i].ambientColor * diffColor.rgb / NR_LIGHTS;
		vec3 lambertian = light[i].diffuseColor * lambertianStrength * diffColor.rbg;
		vec3 specular = light[i].specularColor * specularStrength * texture(material.specularTexture, retTexCoord).rbg;

		finalColor += (ambient + lambertian + specular) * light[i].color;
	}
	FragColor = vec4(finalColor, diffColor.a);
}
